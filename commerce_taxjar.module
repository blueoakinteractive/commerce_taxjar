<?php

/**
 * @file
 * Provides integration between TaxJar and Drupal Commerce.
 */

/**
 * Implements hook_menu().
 */
function commerce_taxjar_menu() {
  $items = array();
  $items['admin/commerce/config/taxjar'] = array(
    'title' => 'TaxJar Configuration',
    'description' => 'Configure API settings for TaxJar integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_taxjar_admin_settings_form'),
    'access arguments' => array('administer taxjar'),
    'file' => 'includes/commerce_taxjar.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_taxjar_permission() {
  return array(
    'administer taxjar' => array(
      'title' => t('Administer Commerce TaxJar'),
      'description' => t('Allows users to configure Commerce TaxJar'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_taxjar_commerce_price_component_type_info() {
  $components = array();

  // Create a price component for sales tax calculated by TaxJar.
  $components['taxjar_tax'] = array(
    'title' => t('Sales tax'),
    'display_title' => t('Tax'),
    'weight' => 99,
  );
  return $components;
}

/**
 * Impelements hook_module_implements_alter().
 */
function commerce_taxjar_module_implements_alter(&$implementations, $hook) {
  // Move our hook_commerce_cart_order_refresh implementation to the end.
  if ($hook == 'commerce_cart_order_refresh') {
    if (!empty($implementations['commerce_taxjar'])) {
      $implementation = $implementations['commerce_taxjar'];
      unset($implementations['commerce_taxjar']);
      $implementations['commerce_taxjar'] = $implementation;
    }
  }
}

/**
 * Implements hook_commerce_cart_order_refresh().
 */
function commerce_taxjar_commerce_cart_order_refresh($order_wrapper) {
  rules_invoke_event('commerce_taxjar_refresh_order', $order_wrapper);
}

/**
 * Calculate tax for the order or fetch it from the cache.
 *
 * @param $order_wrapper
 */
function commerce_taxjar_calculate_tax($order_wrapper) {
  $api = commerce_taxjar_api();
  $api->setWrapper($order_wrapper);
  $api->getTax();
}

  /**
 * Creates a field instance on the specified commerce_product bundle.
 *
 * @param $bundle
 * @throws \FieldException
 */
function commerce_taxjar_create_field_instances($bundle, $default_value) {
  field_cache_clear();
  $field_name = 'product_taxjar_category';
  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_product', $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'cardinality' => 1,
      'entity_types' => array('commerce_product'),
      'translatable' => FALSE,
      'locked' => FALSE,
      'settings' => array(
        'allowed_values' => commerce_taxjar_categories_list(),
      ),
    );
    try {
      $field = field_create_field($field);
    } catch (FieldException $ex) {
      watchdog('commerce_taxjar', 'Unable to create field base for @bundle due to @error', array(
        '@bundle' => $bundle,
        '@error' => $ex->getMessage()
      ), WATCHDOG_WARNING);
    }
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_product',
      'bundle' => $bundle,
      'label' => t('TaxJar Category'),
      'required' => TRUE,
      'settings' => array(),
      'default_value' => array(
        array('value' => $default_value),
      ),
      'display' => array(),
    );
    try {
      field_create_instance($instance);
    } catch (FieldException $ex) {
      watchdog('commerce_taxjar', 'Unable to create field instance for @bundle due to @error', array(
        '@bundle' => $bundle,
        '@error' => $ex->getMessage()
      ), WATCHDOG_WARNING);
    }
  }
}

/**
 * Instantiates the TaxJar PHP component.
 * @return bool|\TaxJar\Client
 */
function commerce_taxjar_api() {
  $settings = variable_get('commerce_taxjar_settings');
  if (!empty($settings['api_key'])) {
    $taxjar = CommerceTaxJar::withSettings($settings);
    if (!empty($taxjar)) {
      return $taxjar;
    }
  }
  return FALSE;
}

/**
 * Returns an array of taxjar settings that should be saved.
 */
function commerce_taxjar_settings_values() {
  return array(
    'api_key',
    'default_tax_category',
  );
}

/**
 * Fetch the available TaxJar tax categories.
 */
function commerce_taxjar_categories_list() {
  $categories = array(0 => t('None'));
  $taxjar = commerce_taxjar_api();
  if (!empty($taxjar)) {
    $taxjar_categories = $taxjar->categories();
    if (!empty($taxjar_categories->categories)) {
      foreach ($taxjar_categories->categories as $taxjar_category) {
        $tax_code = check_plain($taxjar_category->product_tax_code);
        $tax_name = check_plain($taxjar_category->name);
        $categories[$tax_code] = $tax_name;
      }
    }
  }
  return $categories;
}
